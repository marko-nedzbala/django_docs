
$ django-admin startproject mysite folder
$ python manage.py startapp my_app


$ python manage.py makemigrations app_name

$ python manage.py migrate

Adding an app to settings.py
app_name.apps.AppNameConfig













MODELS

class MyModel(models.Model):
    ...
    def __str__(self):
        return self.field_name

field options
null: is database-related, if True (null) will store empty values as NULL in the database
blank: validation-related, if True (blank) will allow blank values

Choices
MY_CHOICE = [
    ('Aa', 'A stuff'),
    ('Bb', 'B stuff'),
]
also acceptable
MY_CHOICE = {
    'Aa': 'A stuff',
    'Bb': 'B stuff',
}
a_choice = models.CharField(max_length=2, choices=MY_CHOICE)

the display value for a field with choices can be accessed using get_FOO_display()

adding meta data, model metadata is anything that is not a field:
+ordering
+database table name

MyModel
    class Meta:
        ordering = ['first_name']

Manager
is the most important attribute of a model, the interface in which database query operations are provided to Django, and retrieve the instances from the database
default is named 'objects'

custom methods on a model: "row-level" functionality
Manager ()s are intended for "table-wide" things

should always define
    __str__()
    get_absolute_url()

MyModel:
    def save(self, **kwargs):
        do_something()
        super().save(**kwargs)
        do_something()








DATA
$ chmod +x manage.py

data dump
$ ./manage.py dumpdata > data_dump.json

data load
$ ./manage.py loaddata data_dump.json



ADMIN
(tutorial part 7)
add our app to admin

from .models import MyModel
admin.site.register(MyModel)

adding fields to your admin page

from django.contrib import admin
from .models import Question, Choice
class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']
admin.site.register(Question, QuestionAdmin)

displaying the columns
list_display = ['field01', 'field02', ...]














URLS
namespacing URL names
my_app/urls.py
app_name = 'polls'

then to reference:
{% url 'polls:view_name' parameter %}






























