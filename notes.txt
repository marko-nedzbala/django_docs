
LEFT OFF
Performing raw SQL Queries

Data Science Part 1: 20:50:00









$ django-admin startproject mysite folder
$ python manage.py startapp my_app


$ python manage.py makemigrations app_name

$ python manage.py migrate

Adding an app to settings.py
app_name.apps.AppNameConfig













MODELS

class MyModel(models.Model):
    ...
    def __str__(self):
        return self.field_name

field options
null: is database-related, if True (null) will store empty values as NULL in the database
blank: validation-related, if True (blank) will allow blank values

Choices
MY_CHOICE = [
    ('Aa', 'A stuff'),
    ('Bb', 'B stuff'),
]
also acceptable
MY_CHOICE = {
    'Aa': 'A stuff',
    'Bb': 'B stuff',
}
a_choice = models.CharField(max_length=2, choices=MY_CHOICE)

the display value for a field with choices can be accessed using get_FOO_display()

adding meta data, model metadata is anything that is not a field:
+ordering
+database table name

MyModel
    class Meta:
        ordering = ['first_name']

Manager
is the most important attribute of a model, the interface in which database query operations are provided to Django, and retrieve the instances from the database
default is named 'objects'

custom methods on a model: "row-level" functionality
Manager ()s are intended for "table-wide" things

should always define
    __str__()
    get_absolute_url()

MyModel:
    def save(self, **kwargs):
        do_something()
        super().save(**kwargs)
        do_something()

Model class: represents a database table
Instance of class: represents a particular record in the database table
my = MyModel(name='Bob')
my.save()

to create and save in a single step
my.create()

Saving changes to an object (UPDATE)
my.property_name = 'new name'
my.save()

Retrieving objects
construct a QuerySet via a Manager
QuerySet (SELECT): collection of objects from your database
Filter (WHERE or LIMIT)

each model has at least 1 Manager, called objects by defaults
Managers are accessible only via model classes, not model instances, this enforces a separation between "table-level" (the Model) and "record-level" operations (the model instance)
MyModel.objects
MyModel.objects.all()

but will use filter()
MyModel.objects.filter(pub_date__year=2006

Field lookups
field__lookuptype=value

Comparing fields on the model
compare the value of a model field with another field on the same model
F() expressions, instances of F() act as a reference to a model field within a query
from django.db.models import F
# example
Entry.objects.filter(field_name_01__gt=F('field_name_02'))

can cache a QuerySet just by saving it to a variable, but you must query the entire QuerySte
query_set = MyModel.objects.all()   # make the query
queryset[5] # will not be cached
[entry for entry in queryset] # queries the database
queryset[5] # use the cache

KT() expressions: represents the text value of a key, index or path transform of JSONField

Q objects allow complex lookups


Aggregation
when you need to retrieve values that are derived by summarizing or aggregating a collection of objects

MyModel.objects.count()
MyModel.objects.aggregate(Avg('field_name'))

2 ways to generate aggregats:
1.) generate summary values over an entire QuerySet
MyModel.objects.aggregate(Avg('field_name'))
MyModel.objects.aggregate(Avg('field_name'), Max('field_name'))

2.) generate an independent summary for each object in a QuerySet
prt-object summaries can be generated using annotate(), each object in the QuerySet will be annotated with the specified values
q = MyModel.objects.annotate(Count('authors'))
q[0]                    # first object
q[0].fieldName__count   # field name, aggregate

Order of annotate() and filter() clauses
order matters when applied to a query
annotate() is computed over the state of the query up to the point where the annotation is requested
whichever is applied first, gives the result to the second
annotate() -> results from annotate() are applied to filter()

can inspect a query with str(myQuerySet.query)

values() will group based on the column name provided


Search
provides support for searching in PostgreSQL
django.contrib.postgres

Elastic: paid
Solr: Apache open-source

Managers
manager: table-level functionality to your models
row-level: custom methods

class MyManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().someFilter(...)

class MyModel(models.Model):
    column01 = models.CharField(max_length=100)

    objects = models.Manager()  # the default manager
    my_objects = MyManager()    # the custom manager

the first manager is considered the default manager

Managers must be allowed to be copied

Raw SQL
should escape characters with params

to protect against SQL injvection do not include quotes around %s placeholders

Manager.raw()

params is a list or dictionary of parameters
name = 'bob'
MyModel.objects.raw('SELECT * FROM my_person WHERE last_name = %s', [name])

Executing custom SQL directly
from django.db import connection the default database connection

with connection.cursor() as cursor():
    cursor.execute('sql statement')

Database transactions
each view is enclosed in a transaction

Fixtures
fixture: is a collection foles that contain the serialized contents of the database

produce a fixture
$ python manage.py dumpdata

use a fixture
$ django-admin loaddata fixture_label


DATA
$ chmod +x manage.py

data dump
$ ./manage.py dumpdata > data_dump.json

data load
$ ./manage.py loaddata data_dump.json



ADMIN
(tutorial part 7)
add our app to admin

from .models import MyModel
admin.site.register(MyModel)

adding fields to your admin page

from django.contrib import admin
from .models import Question, Choice
class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']
admin.site.register(Question, QuestionAdmin)

displaying the columns
list_display = ['field01', 'field02', ...]





URLS
Reverse resolution of URLs
templates: url template tag
Python code: reverse() function
higher level code related to handling of URLs of Django model instances: get_absolute_url()

URLconf entry
path('articles/<int:year>/', views.year_archive, name='news-year-archive')

template code
<a href="{% url 'news-year-archive' 2021 %}">2012</a>

Python code
def my_redirect(request):
    return HttpResponseRedirect(reverse('news-year-archive', arges=(year,) ))

URL Namespaces
allow you to unqiuely reverse named URL patterns even if different application use the same URL names

URL namespace comes in 2 parts (both are strings):
1.) application namespace: the name of the application
2.) instance namespace: a specific instance of an application, can be the same as he application namespace

app_name:page_name

namespacing URL names
my_app/urls.py
app_name = 'polls'
urlpatterns = [
    path('', views.IndexView.as_view(), name='index'),
]

then to reference:
{% url 'polls:view_name' parameter %}

urls.py
urlpatterns = [
    path('polls/', include('polls.urls')),
]















































































































